# -*- coding: utf-8 -*-
"""preparing_data_box_plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WjiWh4k9MsA-YGGs2WYU0Op6f4UzsIzU
"""

import pandas as pd
import numpy as np

# Global Variables
a=4
g=9
k=7
no_of_routers = a * g # replace with a * g
time_step = 50
inj_rate = ['0.10','0.15','0.20','0.25','0.30','0.35','0.40','0.45', '0.50','0.52']
decision_headers = ['time','minport','nonminport', 'minhop', 'nonminhop', 'port_occ-0', 'port_occ-1',
                               'port_occ-2', 'port_occ-3', 'port_occ-4', 'port_occ-5',
                               'port_occ-6', 'routing']
load_file_path = '/pylon5/ec5phhp/fatema32/data_collected_worst_rnn/data_worst_case/'

# plotting boxplot
single_router_num_of_routing_decsns = []



def load_data(filename, headers):
  dataset = pd.read_csv(filename, delim_whitespace=True,
                        names= headers)
  return dataset



def get_past_history(range_time, routing_decision_dataset):
  routing_range_time = [range_time[1]+1, range_time[0]]
  temp_routing_decision = routing_decision_dataset.loc[routing_decision_dataset['time'] <= routing_range_time[1]]
  temp_routing_decision = temp_routing_decision.loc[temp_routing_decision['time'] > routing_range_time[0]]
  single_router_num_of_routing_decsns.append(temp_routing_decision.shape[0])



def process_data_for_this_router(router, decision_file):
  print('router id', router)

  # load data for corresponding files
  routing_decision_dataset = load_data(decision_file, decision_headers)

  #print(routing_decision_dataset.head(10))
  routing_decision_dataset = routing_decision_dataset.drop(columns = ['minport','nonminport', 
                                                                      'minhop', 'nonminhop',
                                                                      'port_occ-0', 'port_occ-1',
                                                                      'port_occ-2', 'port_occ-3', 
                                                                      'port_occ-4', 'port_occ-5',
                                                                      'port_occ-6'])
  n_rows = routing_decision_dataset.shape[0]
  #n_rows = 100
  for i in range(n_rows):
    # router event time
    event_time = routing_decision_dataset.iloc[i]["time"]

    # range of time step
    range_time = [event_time, event_time - time_step]
    lower_bound = range_time[1]
    if lower_bound < 0:
      ######## Lets not prepad data ##########
      continue
    else:
      # get past history
      get_past_history( range_time, routing_decision_dataset)



def clear_vectors():
  single_router_num_of_routing_decsns.clear()



def dataset_preparation():
  print(no_of_routers)

  for router in range(0, 1):
    clear_vectors()
    decision_file = load_file_path + "routing_decision_src_" + str(router) + "_inj_"

    for inj in inj_rate:
      # construct string for file names
      st_inj = inj + "0000"
      decision_file += st_inj

      # process data for this router
      process_data_for_this_router(router, decision_file)

      # remove added st_inj from decision_file
      decision_file = decision_file.replace(st_inj, "")

    print(' router ', router, ' shape ', len(single_router_num_of_routing_decsns))

    f = open("/pylon5/ec5phhp/fatema32/number_of_routing_decsn_2.txt", "a")
    f.write('router=%s' % router)
    f.write('\n')
    for item in single_router_num_of_routing_decsns:
        f.write("%s," % item)
    f.write('\n')
    f.close()

  



# call dataset preparation function
dataset_preparation()


# the end
print("====================================")

