# -*- coding: utf-8 -*-
"""Data_Preprocess_June_30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUKHjxJrqhm-D2t-1srjNTXqqXepVask
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
import seaborn as sns
from matplotlib import pyplot as plt
from google.colab import files


# Global Variables
a=4
g=9
k=7
cycle_file = "write_counters_each_cycles"
decision_file = "router_decision_counters"


# Prepare headings for write_counters_each_cycles file
def prepare_headings_for_each_cycle_data():
  headings = ["time", "router_id"]
  headings_to_drop = []

  for i in range(a):
    header_str = "destc-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(k):
    header_str = "portthr-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(g):
    header_str = "destgrp-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)
    header_str = "thrdestgrp-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(g):
    for j in range(g):
      header_str = str(i)+"->"+str(j)
      headings.append(header_str)
      headings_to_drop.append(header_str)
  
  for i in range(k):
    header_str = "port_occ-" + str(i)
    headings.append(header_str)

  return headings, headings_to_drop


headers, headers_to_drop = prepare_headings_for_each_cycle_data()
print(headers)
print(headers_to_drop)


# load data with proper headings
def load_data(filename, whitespace, sep, names):
  if whitespace == True:
    dataset = pd.read_csv(filename, delim_whitespace=True, names = names)
  else:
    dataset = pd.read_csv(filename, sep=sep, delim_whitespace=False, names = names)
  return dataset

dataset_with_all_features = load_data(cycle_file, True, False, headers)
dataset_with_all_features.head(5)


def delete_unnecessary_features(dataset_with_all_features, headers_to_drop):
  dataset = dataset_with_all_features.drop(columns=headers_to_drop)
  return dataset

dataset_with_required_features = delete_unnecessary_features(dataset_with_all_features, headers_to_drop )
print(dataset_with_required_features)

# save dataset to csv
dataset_with_required_features.to_csv('parsed_cycles_data.csv', index = False)


# Prepare headings for router_decision_counters file
def prepare_headings_for_routing_decision_data():
  headings = ["time","src","dest","intm","min_port","nonmin_port"]
  headings_to_drop = ["dest","intm"]

  for i in range(a):
    header_str = "min_path-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(k):
    header_str = "nonmin_path-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(a):
    header_str = "destc-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(k):
    header_str = "portthr-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(g):
    header_str = "destgrp-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)
    header_str = "thrdestgrp-"+str(i)
    headings.append(header_str)
    headings_to_drop.append(header_str)

  for i in range(g):
    for j in range(g):
      header_str = str(i)+"->"+str(j)
      headings.append(header_str)
      headings_to_drop.append(header_str)
  
  for i in range(k):
    header_str = "port_occ-" + str(i)
    headings.append(header_str)

  header_str = "routing"
  headings.append(header_str)

  return headings, headings_to_drop



headers_2, headers_to_drop_2 = prepare_headings_for_routing_decision_data()
#print(headers_2)
#print(headers_to_drop_2)

dataset_with_all_features_2 = load_data(decision_file, True, False, headers_2)
dataset_with_all_features_2.head(5)

dataset_with_required_features_2 = delete_unnecessary_features(dataset_with_all_features_2, headers_to_drop_2 )

# save dataset to csv
dataset_with_required_features_2.to_csv('parsed_routing_decision_data.csv', index = False)


# Check few  Examples
dataset_with_required_features_2.iloc[100:140]

row = dataset_with_required_features_2.iloc[4]
print(row)

src_router_4 = dataset_with_required_features_2.iloc[4]["src"]
print(src_router_4)
